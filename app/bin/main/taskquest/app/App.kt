/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package taskquest.app

import javafx.application.Application
import javafx.beans.value.ObservableValue
import javafx.geometry.Pos
import javafx.scene.Scene
import javafx.scene.control.Button
import javafx.scene.control.Label
import javafx.scene.control.TextField
import javafx.scene.layout.HBox
import javafx.scene.layout.VBox
import javafx.stage.Stage
import org.apache.commons.text.WordUtils
import taskquest.utilities.StringUtils
import taskquest.utilities.models.Task
import taskquest.utilities.models.TaskList
import java.util.*


fun createTaskListVBox(data : List<TaskList>): VBox {

    // create a VBox
    val taskListVBox = VBox(10.0)

    val searchBar = Label("Task List Search bar")
    taskListVBox.children.add(searchBar)

    val textField = TextField()
    textField.setPromptText("Search here!")
    taskListVBox.children.add(textField)

    // add buttons to VBox
    for (taskList in data) {
        taskListVBox.children.add(Button("${taskList.title}"))
    }
    return taskListVBox
}

fun createTasksVBox(data : List<Task>): VBox {


    // create a VBox
    val tasksVBox = VBox(10.0)

    val searchBar = Label("Tasks Search bar")
    tasksVBox.children.add(searchBar)

    val textField = TextField()
    textField.setPromptText("Search here!")
    tasksVBox.children.add(textField)

    // add buttons to VBox
    for (task in data) {
        tasksVBox.children.add(Button("${task.title}"))
    }
    return tasksVBox
}
class App: Application() {
    override fun start(stage: Stage?) {
        // set title for the stage
        stage?.title = "TaskQuest";

        var taskLists = listOf<TaskList>()
        for (id in 1 .. 5) {
            var taskList = TaskList(id, "Task List $id")
            taskLists += (taskList)
        }

        // val taskLists = listOf<String>("1","2","3","4","5")
        val taskListVBox = createTaskListVBox(taskLists)

        var tasks = listOf<Task>()
        for (id in 1 .. 5) {
            var task = Task(id, "Task $id")
            tasks += (task)
        }

        val tasksVBox = createTasksVBox(tasks)

        // val image = Image("java.png", 175.0, 175.0)
        // val imageView = ImageView(image)
        val testlabel = Label("TaskQuest window is Working!! " + "\n" +
                System.getProperty("java.vendor") + "\n"
                + System.getProperty("java.version") + "\n"
                + System.getProperty("javafx.version"))

        val hbox = HBox(20.0, taskListVBox, tasksVBox)
        hbox.setAlignment(Pos.CENTER); //Center HBox
        val scene = Scene(hbox, 800.0, 500.0)
        stage?.setResizable(false)
        stage?.setScene(scene)
        stage?.show()
    }
}

fun main() {
    Application.launch(App::class.java)

    val tokens = StringUtils.split(MessageUtils.getMessage())
    val result = StringUtils.join(tokens)
    println(WordUtils.capitalize(result))
}
